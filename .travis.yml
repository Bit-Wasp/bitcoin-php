
language: php

php:
  - 7.0
  - 7.1
  - 7.2
  - 7.3

env:
  - PHPUNIT=true PHPUNIT_EXT=true BITCOIN_VERSION="0.16.3" SECP256K1_REMOTE="jonasnick/secp256k1" SECP256K1_COMMIT="1901f3bf9c6197f0bd3cc62e9f6c69296566a23a"

dist: trusty
sudo: required

cache:
  directories:
    ${HOME}/bitcoin

matrix:
  exclude:
    - php: 7.2
      env: PHPUNIT=true PHPUNIT_EXT=true BITCOIN_VERSION="0.16.3" SECP256K1_REMOTE="jonasnick/secp256k1" SECP256K1_COMMIT="1901f3bf9c6197f0bd3cc62e9f6c69296566a23a"

  include:
    # add extra test runs for php7: coverage, codestyle, examples, rpc tests
    - php: 7.2
      env: COVERAGE=true CODE_STYLE=true EXAMPLES=true PHPUNIT=true PHPUNIT_EXT=true BITCOIN_VERSION="0.16.3" SECP256K1_REMOTE="jonasnick/secp256k1" SECP256K1_COMMIT="1901f3bf9c6197f0bd3cc62e9f6c69296566a23a"
    - php: 7.0
      env: RPC_TEST=true BITCOIN_VERSION="0.16.3" SECP256K1_REMOTE="jonasnick/secp256k1" SECP256K1_COMMIT="1901f3bf9c6197f0bd3cc62e9f6c69296566a23a"

install:
    - |
        if [ "$BITCOIN_VERSION" != "" ] && [ ! -e "${HOME}/bitcoin" ]; then
            mkdir ${HOME}/bitcoin
        fi
    - |
        if [ "$BITCOIN_VERSION" != "" ] && [ ! -e "${HOME}/bitcoin/bitcoin-$BITCOIN_VERSION" ]; then
            cd ${HOME}/bitcoin &&
            rm bitcoin-* -rf &&
            wget https://bitcoin.org/bin/bitcoin-core-${BITCOIN_VERSION}/bitcoin-${BITCOIN_VERSION}-x86_64-linux-gnu.tar.gz &&
            mv bitcoin-${BITCOIN_VERSION}-x86_64-linux-gnu.tar.gz bitcoin.tar.gz &&
            tar xvf bitcoin.tar.gz &&
            cd ${TRAVIS_BUILD_DIR}
        else
            echo "Had bitcoind"
        fi
    - |
        if [ "$PHPUNIT_EXT" = "true" ]; then
            git clone https://github.com/${SECP256K1_REMOTE}.git &&
            cd secp256k1 && git checkout ${SECP256K1_COMMIT} &&
            ./autogen.sh && ./configure --disable-jni --enable-module-recovery --enable-module-ecdh --enable-module-schnorrsig --enable-experimental &&
            make && sudo make install && cd ..;
        fi
    - |
        if [ "$PHPUNIT_EXT" = "true" ]; then
            git clone https://github.com/afk11/secp256k1-php &&
            cd secp256k1-php/secp256k1 &&
            git fetch origin schnorr2 && git checkout schnorr2 &&
            phpize && ./configure --with-secp256k1 --with-secp256k1-config --with-module-ecdh --with-module-recovery --with-module-schnorrsig &&
            make && sudo make install && echo "extension=secp256k1.so" >> ~/.phpenv/versions/$(phpenv version-name)/etc/php.ini && cd ../..;
        fi
    - |
        if [ "$PHPUNIT_EXT" = "true" ]; then
            sudo cp ${HOME}/bitcoin/bitcoin-${BITCOIN_VERSION}/include/bitcoinconsensus.h /usr/include &&
            sudo cp ${HOME}/bitcoin/bitcoin-${BITCOIN_VERSION}/lib/libbitcoinconsensus.so.0.0.0 /usr/lib &&
            sudo ln -s /usr/lib/libbitcoinconsensus.so.0.0.0 /usr/lib/libbitcoinconsensus.so &&
            sudo ln -s /usr/lib/libbitcoinconsensus.so.0.0.0 /usr/lib/libbitcoinconsensus.so.0 &&
            git clone -b v3.0.0 https://github.com/Bit-Wasp/bitcoinconsensus-php &&
            cd bitcoinconsensus-php/bitcoinconsensus &&
            phpize && ./configure --with-bitcoinconsensus &&
            make && sudo make install && echo "extension=bitcoinconsensus.so" >> ~/.phpenv/versions/$(phpenv version-name)/etc/php.ini && cd ../..;
        fi
    - composer update
    - if [ "${COVERAGE}" = "true" ]; then composer require --dev phpstan/phpstan; fi

before_script:
  - if [ "${COVERAGE}" != "true" ] && [ "$TRAVIS_PHP_VERSION" != "hhvm" ] && [ "$TRAVIS_PHP_VERSION" != "nightly" ]; then phpenv config-rm xdebug.ini && echo "xdebug disabled"; fi

script:
  - vendor/bin/phpunit --filter 'TaprootTest::testScript#20'
  - vendor/bin/phpunit --filter 'TaprootTest::testScript#21'
  - travis/run_secp256k1_tests.sh || exit 1
  - if [ "$COVERAGE" = "true" ]; then pwd && vendor/bin/phpstan analyse src tests -l 1; fi
  - make phpunit-ci || exit 1
  - travis/run_rpc_tests.sh || exit 1
  - if [ "$CODE_STYLE" = "true" ]; then make phpcs && echo "Code style OK"; fi
  - if [ "$EXAMPLES" = "true" ]; then make test-examples && echo "Examples OK"; fi

after_script:
  - if [ "${COVERAGE}" = "true" ]; then make scrutinizer; fi
